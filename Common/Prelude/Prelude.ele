##### Polymorphism #####
# Polymorphic type - defers type checking for instance until call sites
intrinsic struct any;

# Calls function by nominative argument matching the functions parameters with the supplied instances fields
# Typically used with mapVariadic to cast an untyped variadic return back into a type instance, e.g.
#   Vector3Add(a, b) = infer(Vector3, mapVariadic(num.add, a, b));
intrinsic infer(function, instance);



##### Variadics #####
# struct Tuple(...);
# Variadic structure of non-homogeneous fields
# Tuple fields are positionally named itemN, e.g. a = Tuple(4, 20) is composed of a.item1 = 4 and a.item2 = 20
# Tuples have special type identity - only tuples that are structurally identical compare equal
# Structural identity is where the Tuples have the same arity and fields of the same type in the same order
intrinsic struct Tuple;

# mapVariadic(function, ...)...;
# Returns a structure of functions where each functions inputs are the variadic inputs scope accessed by the output expression.
# The supplied function's arity must be equal to the number of variadic parameters, e.g.
# mapVariadic(num.add, a) is invalid as num.add expects 2 parameters
# mapVariadic(num.add, a, b).x is valid and evaluates to num.add(a.x, b.x)
intrinsic memberwise;

# array(...):List;
# Creates a literal List from a the parameter list
# Elements must be homogeneous
intrinsic array;



##### General Function Types #####
# Any 1-arity (monadic) function
Unary(a);

# Any 2-arity (dyadic) function
Binary(a, b);

# Any 3-arity (triadic) function
Ternary(a, b, c);

Indexer(i:num);
Predicate(a):Bool;



##### Guarantee-breaking Functions #####
# Calls body repeatedly until condition is not met
# WARNING: Usage of this function breaks halting guarantees
# Body is a Unary function supplied with the output from the previous body starting with initial
# Thus the types of initial and both the parameter and return of Unary must have compatible interfaces
# List.fold is recommended as a constant-time alternative to for when iteration count is known
intrinsic for(initial, condition:Predicate, body:Unary);

# Keeps a persistent structure around between program invocations
# WARNING: Usage of this function breaks referential transparency and pure function guarantees
# Body is a Unary function supplied with the output from the previous body starting with initial
# Thus the types of initial and both the parameter and return of Unary must have compatible interfaces
# NOTE: Body is evaluated between calls to the compiled element function, not between separate references to the persist return expression
intrinsic persist(initial, body:Unary);



intrinsic struct num
{
    # Arithmetic functions
    # a + b
    intrinsic add(a:num, b:num):num;
    # a - b
    intrinsic sub(a:num, b:num):num;
    # a * b
    intrinsic mul(a:num, b:num):num;
    # a / b
    intrinsic div(a:num, b:num):num;

    # a ^ b
    intrinsic pow(a:num, b:num):num;
    # a % b - rounds towards negative infinity
    intrinsic rem(a:num, b:num):num;

    # min(...):num;
    # Finds the minimum in a variable amount of numbers
    intrinsic min:num;

    # max(...):num;
    # Finds the maximum in a variable amount of numbers
    intrinsic max:num;

    # |a| - absolute value function
    intrinsic abs(a:num):num;

    # ⌈a⌉ - smallest next integer
    intrinsic ceil(a:num):num;
    # ⌊a⌋ - largest previous integer
    intrinsic floor(a:num):num;

    # Trigonometric functions
    intrinsic sin(a:num):num;
    intrinsic cos(a:num):num;
    intrinsic tan(a:num):num;

    intrinsic asin(a:num):num;
    intrinsic acos(a:num):num;
    intrinsic atan(a:num):num;

    # 2 argument arctangent function where a and b specify a cartesian coordinate
    intrinsic atan2(a:num, b:num):num;

    degrees(a:num):num = a.mul(180.div(pi));
    radians(a:num):num = a.mul(pi.div(180));


    # Logarithmic functions
    intrinsic ln(a:num):num;
    intrinsic log(a:num, b:num):num;

    # Constants
    pi   = 3.14159265359;
    tau  = pi.mul(2);
    e    = 2.718281828459045;

    sqr(a:num):num      = a.mul(a);
    sqrt(a:num):num     = a.pow(0.5);
    exp(a:num):num      = a.pow(e);
    half(a:num):num     = mul(a, 0.5);

    # remainder rounded towards 0
    mod(a:num, b:num):num
    {
        c = a.rem(b);
        return = c.mul(b).lt(0).if(add(c, b), c);
    }

    negate(a:num):num                   = 0.sub(a);
    roundToZero(a:num):num              = a.sub(a.rem(1));
    sign(n:num):num                     = n.leq(0).if(n.eq(0).if(-1, 0), 1);
    dist(a:num, b:num):num              = a.sub(b).abs;
    lerp(t:num, a:num, b:num):num       = a.add(t.mul(b.sub(a)));
    clamp(a:num, min:num, max:num):num  = a.max(min).min(max);

    # Comparison functions
    eq(a:num, b:num):Bool   = a.neq(b).negate;
    neq(a:num, b:num):Bool  = a.sub(b).abs.to(Bool);
    lt(a:num, b:num):Bool   = b.sub(a).to(Bool);
    leq(a:num, b:num):Bool  = a.gt(b).negate;
    gt(a:num, b:num):Bool   = a.sub(b).to(Bool);
    geq(a:num, b:num):Bool  = a.lt(b).negate;

    to(a:num, constructor:Unary) = constructor(a);
}



# Bool is guaranteed by a host to be refined to 1 or 0
intrinsic struct Bool(n:num)
{
    true = 1.to(Bool);
    false = 0.to(Bool);

    if(condition:Bool, ifTrue, ifFalse) = array(ifFalse, ifTrue).at(condition.n).to(Bool);

    negate(a:Bool):Bool         = a.add(1).rem(2).to(Bool);
    and(a:Bool, b:Bool):Bool    = a.n.mul(b.n).to(Bool);
    or(a:Bool, b:Bool):Bool     = a.n.add(b.n).sub(a.n.mul(b.n)).to(Bool);
    xor(a:Bool, b:Bool):Bool    = a.n.add(b.n).rem(2).to(Bool);
    xnor(a:Bool, b:Bool):Bool   = a.n.add(b.n).add(1).rem(2).to(Bool);
}



# Stream represents an infinite set of elements
struct Stream(at:Indexer)
{
    repeat(value):Stream = Stream(_(_) = value);

    take(a:Stream, count:num):List = List(a.at, count);

    skip(a:Stream, count:num):Stream = Stream(_(idx) = a.at(idx.add(count)));
}



# List represents a finite set of elements
struct List(at:Indexer, count:num)
{
    # fold summarizes a list
    # Invokes accumulator(total, element) with each element of the list, starting with initial as the total and returning a new total each iteration.
    # For example, fold(array(1, 2, 3), 0, add) evaluates to 0.add(1).add(2).add(3).
    intrinsic fold(list:List, initial, accumulator:Binary);
    
    map(a:List, mapper:Unary):List = List(_(idx) = mapper(a.at(idx)), a.count);

    zip(a:List, b:List, zipper:Binary):List = List(_(idx) = zipper(a.at(idx), b.at(idx)), a.count);

    repeat(value, count:num):List = List(_(_) = value, count);

    range(start:num, count:num):List = List(_(idx) = idx.add(start), count);

    concatenate(a:List, b:List):List
    {
        indexer(idx) = if(idx.lt(a.count), a.at(idx), b.at(idx.sub(a.count)));
        count = a.count.add(b.count);
        return = List(indexer, count);
    }

    take(a:List, amount:num):List = List(a.at, amount);

    skip(a:List, amount:num):List
    {
        count = a.count.sub(amount);
        indexer(idx:num) = a.at(idx.add(amount));
        return = List(indexer, count);
    }

    slice(a:List, start:num, count:num):List = List(_(idx) = a.at(idx.add(start)), count);

    filter(a:List, predicate:Predicate):List
    {
        count = countWhere(a, predicate);
        index(idx) = idx.add(a.slice(0, idx).countWhere(_(item) = predicate(item).negate));
        return = List(index, count);
    }

    cycle(a:List):Stream = Stream(_(idx) = a.at(idx.mod(count)));

    countWhere(a:List, predicate:Predicate):num = a.fold(0, _(current, next) = if(predicate(next), add(current, 1), current));

    reverse(a:List):List = List(_(idx) = a.at(count.sub(idx).sub(1)), a.count);

    findLast(a:List, predicate:Predicate, default) = a.fold(default, _(current, next) = predicate(next).if(next, current));

    findFirst(a:List, predicate:Predicate, default) = a.reverse.findLast(predicate, default);
}