##### Polymorphism #####
# Polymorphic type - defers type checking for instance until call sites
intrinsic struct any;

# Calls function by nominative argument matching the functions parameters with the supplied instances fields
# Typically used with mapVariadic to cast an untyped variadic return back into a type instance, e.g.
#   Vector3Add(a, b) = infer(Vector3, mapVariadic(num.add, a, b));
intrinsic infer(function, instance);



##### Variadics #####
# struct Tuple(...);
# Variadic structure of non-homogeneous fields
# Tuple fields are positionally named itemN, e.g. a = Tuple(4, 20) is composed of a.item1 = 4 and a.item2 = 20
# Tuples have special type identity - only tuples that are structurally identical compare equal
# Structural identity is where the Tuples have the same arity and fields of the same type in the same order
intrinsic struct Tuple;

# mapVariadic(function, ...)...;
# Returns a structure of functions where each functions inputs are the variadic inputs scope accessed by the output expression.
# The supplied function's arity must be equal to the number of variadic parameters, e.g.
# mapVariadic(num.add, a) is invalid as num.add expects 2 parameters
# mapVariadic(num.add, a, b).x is valid and evaluates to num.add(a.x, b.x)
intrinsic memberwise;



##### General Function Types #####
# Any 1-arity (monadic) function
Unary(a);

# Any 2-arity (dyadic) function
Binary(a, b);

# Any 3-arity (triadic) function
Ternary(a, b, c);

Indexer(i:num);
Predicate(a):Bool;



##### Guarantee-breaking Functions #####
# Calls body repeatedly until condition is not met
# WARNING: Usage of this function breaks halting guarantees
# Body is a Unary function supplied with the output from the previous body starting with initial
# Thus the types of initial and both the parameter and return of Unary must have compatible interfaces
# List.fold is recommended as a constant-time alternative when iteration count is known
intrinsic for(initial, condition:Predicate, body:Unary);

# Keeps a persistent structure around between program invocations
# WARNING: Usage of this function breaks referential transparency and pure function guarantees
# Body is a Unary function supplied with the output from the previous body starting with initial
# Thus the types of initial and both the parameter and return of Unary must have compatible interfaces
# NOTE: Body is evaluated between calls to the compiled element function, not between separate references to the persist return expression
intrinsic persist(initial, body:Unary);