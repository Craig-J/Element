intrinsic struct num
{
    # Arithmetic functions
    # a + b
    intrinsic add(a:num, b:num):num;
    # a - b
    intrinsic sub(a:num, b:num):num;
    # a * b
    intrinsic mul(a:num, b:num):num;
    # a / b
    intrinsic div(a:num, b:num):num;

    # a ^ b
    intrinsic pow(a:num, b:num):num;
    # a % b - rounds towards negative infinity
    intrinsic rem(a:num, b:num):num;

    # min(...):num;
    # Finds the minimum in a variable amount of numbers
    intrinsic min:num;

    # max(...):num;
    # Finds the maximum in a variable amount of numbers
    intrinsic max:num;

    # |a| - absolute value function
    intrinsic abs(a:num):num;

    # ⌈a⌉ - smallest next integer
    intrinsic ceil(a:num):num;
    # ⌊a⌋ - largest previous integer
    intrinsic floor(a:num):num;

    # Trigonometric functions
    intrinsic sin(a:num):num;
    intrinsic cos(a:num):num;
    intrinsic tan(a:num):num;

    intrinsic asin(a:num):num;
    intrinsic acos(a:num):num;
    intrinsic atan(a:num):num;

    # 2 argument arctangent function where a and b specify a cartesian coordinate
    intrinsic atan2(a:num, b:num):num;

    degrees(a:num):num = a.mul(180.div(pi));
    radians(a:num):num = a.mul(pi.div(180));


    # Logarithmic functions
    intrinsic ln(a:num):num;
    intrinsic log(a:num, b:num):num;

    # Constants
    pi   = 3.14159265359;
    tau  = pi.mul(2);
    e    = 2.718281828459045;

    sqr(a:num):num      = a.mul(a);
    sqrt(a:num):num     = a.pow(0.5);
    exp(a:num):num      = a.pow(e);
    half(a:num):num     = mul(a, 0.5);

    # remainder rounded towards 0
    mod(a:num, b:num):num
    {
        c = a.rem(b);
        return = c.mul(b).lt(0).if(add(c, b), c);
    }

    negate(a:num):num                   = 0.sub(a);
    roundToZero(a:num):num              = a.sub(a.rem(1));
    sign(n:num):num                     = n.leq(0).if(n.eq(0).if(-1, 0), 1);
    dist(a:num, b:num):num              = a.sub(b).abs;
    lerp(t:num, a:num, b:num):num       = a.add(t.mul(b.sub(a)));
    clamp(a:num, min:num, max:num):num  = a.max(min).min(max);

    # Comparison functions
    eq(a:num, b:num):Bool   = a.neq(b).negate;
    neq(a:num, b:num):Bool  = a.sub(b).abs.to(Bool);
    lt(a:num, b:num):Bool   = b.sub(a).to(Bool);
    leq(a:num, b:num):Bool  = a.gt(b).negate;
    gt(a:num, b:num):Bool   = a.sub(b).to(Bool);
    geq(a:num, b:num):Bool  = a.lt(b).negate;

    to(a:num, constructor:Unary) = constructor(a);
}